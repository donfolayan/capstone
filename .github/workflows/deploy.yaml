name: Azure AKS Deploy

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs: 
  AKS-Cluster-Deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      PASSWORD: ${{ secrets.PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Assign Roles
        run: |
          az role assignment create --role "Contributor" --assignee ${{ secrets.AZURE_CLIENT_ID }} --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }} 
          az role assignment create --role "User Access Administrator" --assignee ${{ secrets.AZURE_CLIENT_ID }} --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group (if not exists)
        run: |
          az group create --name sockshop_capstone-rg --location "East US 2"

      - name: Create Key Vault
        run: |
          az keyvault create --name "sockshop" --resource-group sockshop_capstone-rg --location "East US 2" || echo "Key Vault already exists"
          set +e
          while [[ $(az keyvault show --name sockshop --query "properties.provisioningState" -o tsv) != "Succeeded" ]]; do
            echo "Waiting for Key Vault to be ready..."
            sleep 10
          done
          set -e

      - name: Assign Permissions to Service Principal
        run: |
          az role assignment create --role "Key Vault Secrets Officer" --assignee ${{ secrets.AZURE_CLIENT_ID }} --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/sockshop_capstone-rg/providers/Microsoft.KeyVault/vaults/sockshop
          echo "Waiting for permissions to be assigned..."
          sleep 10

      - name: Store Secrets in Key Vault
        run: |
          az keyvault secret set --vault-name "sockshop" --name "client-id" --value "${{ secrets.AZURE_CLIENT_ID }}"
          az keyvault secret set --vault-name "sockshop" --name "password" --value "${{ secrets.PASSWORD }}"
          az keyvault secret set --vault-name "sockshop" --name "subscription-id" --value "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Get Key Vault ID
        id: get_kv_id
        run: |
          echo "keyvault_id=$(az keyvault show --name sockshop --query id -o tsv)" >> $GITHUB_ENV
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: latest

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Import Resource
        id: import_rg
        run: |
          terraform import azurerm_resource_group.rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/sockshop_capstone-rg
          echo "Import step completed."
    
      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve
          
      - name: Terraform Output
        run: terraform output

      - name: Apply Application Manifests
        run: |
          az aks get-credentials --resource-group sockshop_capstone-rg --name capstone-aks
          kubectl apply -f ../application/manifest.yaml

      - name: Install Ingress
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.11.1/deploy/static/provider/cloud/deploy.yaml 
          echo "Waiting for NGINX Ingress Controller to be ready..."
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=300s

      - name: Install Prometheus Stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install prometheus prometheus-community/kube-prometheus-stack --namespace sock-shop

      - name: Install Cert-Manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.2/cert-manager.crds.yaml
          helm repo add jetstack https://charts.jetstack.io --force-update
          kubectl create namespace cert-manager
          helm install cert-manager --namespace cert-manager --version v1.15.2 jetstack/cert-manager -f ../application/certificate/cert-manager-values.yaml
          sleep 30
          kubectl wait --for=condition=ready pod --all -n cert-manager --timeout=5m
          echo "Cert Manager pods are ready."

      - name: Apply Certificate, Ingress Files, Rolebinding
        run: |
          kubectl apply -f ../application/certificate/certificate.yaml
          kubectl apply -f ../application/certificate/cert-issuer.yaml
          kubectl apply -f ../application/ingress/ingress.yaml
          kubectl apply -f ../application/ingress/grafana-ingress.yaml
          kubectl apply -f ../application/ingress/prometheus-ingress.yaml
          kubectl apply -f ../application/ingress/rolebinding.yaml

      - name: Terraform Destroy
        if: failure()
        run: terraform destroy --auto-approve